{
    "collab_server" : "",
    "contents" : "## function eat table for OC_manager\n\nneed_appli = c(\"SA\",\"Dev\",\"Deriv\",\"Deriv_3\",\"SA_2\",\"SA_in_X\",\"SA_grid\",\"Deriv_single_nozzle\")\n\nsource(\"eat_table_SA_prep.R\")\n\neat_table_LP = function(step){\n  # eat_table_LP function V011,24 february 2017\n  # extract the needed information\n  table = step$table\n  gap = table[table[,1] == \"gap\",2]\n  nbr_track = table[table[,1] == \"nbr_track\",2]\n  nbr_path = table[table[,1] == \"nbr_path\",2]\n  gap_path = table[table[,1] == \"gap_path\",2]\n  Y_length = table[table[,1] == \"Y_length\",2]\n  bottom_dist = table[table[,1] == \"bottom_dist\",2]\n  first_appli=table[table[,1] == \"first_appli\",2]\n  syringe_ratio = table[table[,1] == \"syringe_ratio\",2]\n  microL_per_dm = table[table[,1] == \"microL_per_dm\",2]\n  temp = 0\n  speed = table[table[,1] == \"speed\",2]\n  Z_offset = table[table[,1] == \"Z_offset\",2]\n  \n  \n  \n  track_gap = gap - (nbr_path-1)*gap_path\n  if(nbr_path != 1  && nbr_track != 1){\n    validate(need(track_gap > gap_path,\"the track gap in <= to the path gap\"))\n  }\n  # validate(need(input$LP_Y_length<=100,\"Y_length > 100\"))\n  Y_small = bottom_dist\n  Y_big = bottom_dist + Y_length\n  X_gap = c()\n  for(i in seq(nbr_track)){\n    X_gap = c(X_gap,rep(gap_path,nbr_path-1))\n    X_gap = c(X_gap,track_gap)\n  }\n  mat  =rbind(c(NA,NA,first_appli - (nbr_path-1)/2*gap_path,Y_small,0))\n  for(i in seq(length(X_gap))){\n    vec = c(mat[nrow(mat),3],mat[nrow(mat),4],mat[nrow(mat),3],0,0) \n    if(mat[nrow(mat),4] == Y_small){vec[4] = Y_big}else{vec[4] = Y_small}\n    vec[5] = mat[nrow(mat),5] + abs(vec[2] - vec[4]) /100 * microL_per_dm / 1000 * syringe_ratio\n    # print(vec)\n    mat  =rbind(mat,vec)\n    if(i != length(X_gap)){\n      vec = c(vec[3],vec[4],vec[3]+X_gap[i],vec[4],vec[5])\n      vec[5] = vec[5] + abs(vec[1] - vec[3]) /100 * microL_per_dm / 1000 * syringe_ratio\n      # print(vec)\n      mat  =rbind(mat,vec)\n    }\n  }\n  mat[,5] = round(mat[,5],5)\n  LP_applications = mat\n  \n  plot_step=function() {\n    plot(x=0,y=0,type=\"n\",xlim=c(0,100),ylim=c(0,100),xlab=\"X\",ylab=\"Y\",sub = \"note that the plate is reversed on the printer\")\n    segments(x0=LP_applications[,1],x1 = LP_applications[,3],y0 = LP_applications[,2],y1 = LP_applications[,4])\n  }\n  \n  gcode = c(\n    #paste0(\"; Produce with OC_manager, \",date()),\n    \"G28 ; home all axis, will have a problem with the Z\",\n    \"G29 ; perform bed levelling\",\n    \"G21 ; set units to millimeters\",\n    \"G90 ; use absolute coordinates\",\n    \"M82 ; use absolute distances for extrusion\",\n    \"G92 E0\",\n    paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"))\n  if(Z_offset >0){\n    gcode = c(gcode,paste0(\"G1 Z\",Z_offset,\" ; go in Z offset position\"))\n  }else{\n    gcode = c(gcode,\n            paste0(\"G92 Z\",-Z_offset,\" ; force the Z offset\"),\n            paste0(\"G1 Z\",0,\" ; go in Z offset position\")\n    )\n  }\n  if(temp != 0){gcode = c(gcode,paste0(\"M190 S\",temp,\" ; set temperature\"))}\n  gcode = c(gcode,\n          paste0(\"G1 X\",LP_applications[1,3],\" Y\",LP_applications[1,4],\" ; go in first position\"),\n          \"M400; wait for current move to finish\"\n  )\n  for(i in 2:nrow(LP_applications)){\n    gcode <- c(gcode,\n               paste0(\"G1 X\",LP_applications[i,3],\" Y\",LP_applications[i,4],\" E\",LP_applications[i,5]),\n               \"M400; wait for current move to finish\")\n  }\n  gcode = c(gcode,\"G92 E0\",\n           \"G1 Z5; move Z 5 mm upper\",\n           paste0(\"G1 E-\",LP_applications[nrow(LP_applications),5]+10,\"; move the piston pusher up\"),\n           \"M84     ; disable motors\")\n  \n\n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(paste0(\"Track are \",(nbr_path-1)*gap_path,\" mm large (without counting the outside)\\n\"),\n                paste0(\"Track are \",(nbr_path)*gap_path,\" mm large (counting the outside)\\n\"),\n                paste0(\"Surface is \",(nbr_path)*gap_path*nbr_track*Y_length,\" mm2 large (counting the outside), 1 dm2 = 10000 mm2\\n\"),\n                paste0((LP_applications[nrow(LP_applications),5] / syringe_ratio),\" mL use in this print\")\n                )\n  return(step)\n}\n\neat_table_LP_2 = function(step){\n  # eat_table_LP_2 function V01,13 june 2017\n  # For layerLab: no Z axis, no temp\n  # extract the needed information\n  table = step$table\n  gap = table[table[,1] == \"gap\",2]\n  nbr_track = table[table[,1] == \"nbr_track\",2]\n  nbr_path = table[table[,1] == \"nbr_path\",2]\n  gap_path = table[table[,1] == \"gap_path\",2]\n  Y_length = table[table[,1] == \"Y_length\",2]\n  bottom_dist = table[table[,1] == \"bottom_dist\",2]\n  first_appli=table[table[,1] == \"first_appli\",2]\n  syringe_ratio = table[table[,1] == \"syringe_ratio\",2]\n  microL_per_dm = table[table[,1] == \"microL_per_dm\",2]\n  speed = table[table[,1] == \"speed\",2]\n  X_bias = table[table[,1] == \"X_bias\",2]\n  \n  track_gap = gap - (nbr_path-1)*gap_path\n  if(nbr_path != 1  && nbr_track != 1){\n    validate(need(track_gap > gap_path,\"the track gap in <= to the path gap\"))\n  }\n  # validate(need(input$LP_Y_length<=100,\"Y_length > 100\"))\n  Y_small = bottom_dist\n  Y_big = bottom_dist + Y_length\n  X_gap = c()\n  for(i in seq(nbr_track)){\n    X_gap = c(X_gap,rep(gap_path,nbr_path-1))\n    X_gap = c(X_gap,track_gap)\n  }\n  mat  =rbind(c(NA,NA,first_appli - (nbr_path-1)/2*gap_path,Y_small,0))\n  for(i in seq(length(X_gap))){\n    vec = c(mat[nrow(mat),3],mat[nrow(mat),4],mat[nrow(mat),3],0,0) \n    if(mat[nrow(mat),4] == Y_small){vec[4] = Y_big}else{vec[4] = Y_small}\n    vec[5] = mat[nrow(mat),5] + abs(vec[2] - vec[4]) /100 * microL_per_dm / 1000 * syringe_ratio\n    # print(vec)\n    mat  =rbind(mat,vec)\n    if(i != length(X_gap)){\n      vec = c(vec[3],vec[4],vec[3]+X_gap[i],vec[4],vec[5])\n      vec[5] = vec[5] + abs(vec[1] - vec[3]) /100 * microL_per_dm / 1000 * syringe_ratio\n      # print(vec)\n      mat  =rbind(mat,vec)\n    }\n  }\n  mat[,5] = round(mat[,5],5)\n  LP_applications = mat\n  \n  plot_step=function() {\n    plot(x=0,y=0,type=\"n\",xlim=c(0,100),ylim=c(0,100),xlab=\"X\",ylab=\"Y\",sub = \"note that the plate is reversed on the printer\")\n    segments(x0=LP_applications[,1],x1 = LP_applications[,3],y0 = LP_applications[,2],y1 = LP_applications[,4])\n  }\n  \n  gcode = c(\n    #paste0(\"; Produce with OC_manager, \",date()),\n    \"M400\",\n    \"G28 X0\",\n    \"M400\",\n    \"G28 Y0\",\n    \"G21\",\n    \"G90\",\n    \"G92 E0\",\n    \"M400\",\n    paste0(\"G1 F\",60*speed))\n  gcode = c(gcode,\n            paste0(\"G1 X\",LP_applications[1,3]+X_bias,\" Y\",LP_applications[1,4]),\n            \"M400\"\n  )\n  for(i in 2:nrow(LP_applications)){\n    gcode <- c(gcode,\n               paste0(\"G1 X\",LP_applications[i,3]+X_bias,\" Y\",LP_applications[i,4],\" E\",LP_applications[i,5]),\n               \"M400\"#,\n               #\"G4 P1\"\n    )\n  }\n  gcode = c(gcode,\"G92 E0\",\n            \"G28 Y0\",\n            \"G28 X0\",\n            \"M84\")\n  \n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(paste0(\"Track are \",(nbr_path-1)*gap_path,\" mm large (without counting the outside)\\n\"),\n                paste0(\"Track are \",(nbr_path)*gap_path,\" mm large (counting the outside)\\n\"),\n                paste0(\"Surface is \",(nbr_path)*gap_path*nbr_track*Y_length,\" mm2 large (counting the outside), 1 dm2 = 10000 mm2\\n\"),\n                paste0((LP_applications[nrow(LP_applications),5] / syringe_ratio),\" mL use in this print\\n\"),\n                paste0((LP_applications[nrow(LP_applications),5] / syringe_ratio)/((nbr_path)*gap_path*nbr_track*Y_length)*10000,\" mL/dm2\")\n  )\n  return(step)\n}\n\n\neat_table_Dev = function(step){\n  # eat_table_Dev function V01,21 february 2017\n  # extract the needed information\n  table = step$table\n  \n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  nozzle_X = 1;nozzle_Y = 12\n  plate_X = 100;plate_Y=100\n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  Y=floor(plate_Y/reso/nozzle_Y)*nozzle_Y\n  a = array(0,dim = c(Y,path))\n  ## fill the array\n  dist_bottom = ceiling(table[table[,1] == \"dist_bottom\",2]/reso)\n  dist_top = ceiling(table[table[,1] == \"dist_top\",2]/reso)\n  dist_gauche = ceiling(table[table[,1] == \"dist_gauche\",2]/reso)\n  band_length = ceiling(table[table[,1] == \"band_length\",2]/reso)\n  gap = ceiling(table[table[,1] == \"gap\",2]/reso)\n  dist_gauche_saved = dist_gauche\n  for(i in seq(table[table[,1] == \"nbr_band\",2])){\n    a[dist_gauche:(dist_gauche+band_length),] = 1\n    dist_gauche = dist_gauche+band_length+gap\n  }\n  \n  b = array(0,dim=c(Y/nozzle_Y,dim(a)[2]))\n  \n  for(i in seq(path)){\n    for(j in seq(Y/nozzle_Y)){\n      b[j,i] = BinToDec(a[((j-1)*nozzle_Y+1):(j*nozzle_Y),i])\n    }\n  }\n\n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*table[table[,1] == \"speed\",2],\" ; set speed in mm per min for the movement\"),\n                  paste0(\"G1 Y\",table[table[,1] == \"dist_bottom\",2],\" ; go in Y position\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  \n  \n  I = table[table[,1] == \"I\",2]\n  W = table[table[,1] == \"wait\",2]\n  L = table[table[,1] == \"L\",2]\n  # gcode = b_to_gcode_X_fix(b,start_gcode,end_gcode,table[table[,2] == \"I\",3])\n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso/2,by = reso,length.out = dim(b)[1]),4)\n  )\n  ## begin gcode\n  gcode = start_gcode\n  ## iterate\n  for(k in seq(dim(b)[2])){ # path loop, need modulo for next loop\n    if(k %% 2 == 1){\n      s = seq(dim(b)[1])\n    }else{\n      s = seq(dim(b)[1]) %>% rev\n    }\n    for(j in s){\n      if(b[j,k] != 0){\n        gcode = c(gcode,paste0(\"G1 X\",coordonate$X[j],\" ; go in position\")) ## \n        gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n        gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",b[j,k],\" ; Fire inkjet bits\"))\n      }\n    }\n    if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n  }\n  gcode = c(gcode,end_gcode)\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,dim(a)[1]),type=\"n\",xlim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper right corner\",sub=\"the origin is not the same as usual, I must fix it\")\n    rasterImage(1-apply(a,c(1),mean),xleft = table[table[,1] == \"dist_bottom\",2],xright=table[table[,1] == \"dist_bottom\",2]+0.5,ybottom = 1,ytop=dim(a)[1])\n    }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"Deprecated do not use\"\n  return(step)\n}\n\neat_table_Dev_2 = function(step){\n  ## eat_table_Dev_2 function V01,19 april 2017\n  # in each position, we fire every body, no need for nozzles\n  ## extract the needed information\n  table = step$table\n  \n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = round(inche/dpi,3)\n  \n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  X = table[table[,1] == \"X\",2]\n  Y_left = table[table[,1] == \"Y_left\",2] +25\n  Y_right = table[table[,1] == \"Y_right\",2] +25\n  speed = table[table[,1] == \"speed\",2]\n  I = table[table[,1] == \"I\",2]\n  L = table[table[,1] == \"L\",2]\n  wait = table[table[,1] == \"wait\",2]\n  wait_inc = table[table[,1] == \"wait_inc\",2]\n  \n  S = 4095 ## may be integrate it for later in the table\n  \n  wait_vec = c()\n  for(i in seq(path)){\n    wait_vec = c(wait_vec,round(wait,3))\n    wait = wait*wait_inc\n  }\n  timing = ((Y_right-Y_left)/speed*2+(Y_right-Y_left)/reso*I*0.9/1000)\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"),\n                  paste0(\"G1 X\",X,\" ; go in X position\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  \n  ## begin gcode\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n    Y = Y_left\n    for(i in seq((Y_right-Y_left)/reso)){\n      gcode = c(gcode,\n                paste0(\"G1 Y\",Y,\" ; go in first Y position\"),\n                \"M400 ; Wait for current moves to finish \",\n                paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire inkjet bits\")\n                )\n      Y = Y +reso\n    }\n    if(wait != 0){gcode=c(gcode,paste0(\"G4 S\",wait_vec[k],\"; wait in seconds\"))}\n    gcode\n  })))\n  gcode = c(gcode,end_gcode)\n  \n  ## plot, need recall of Y positions\n  # Y_left = table[table[,1] == \"Y_left\",2]\n  # Y_right = table[table[,1] == \"Y_right\",2]\n  wait = table[table[,1] == \"wait\",2]\n  plot_step=function() {\n    par(mfrow=c(1,2))\n    plot(c(1,100),c(1,100),ylim=c(100,0),xlim=c(0,100),type=\"n\",xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=\"Y = X, convention, convention...\")\n    segments(x0=X,y0=Y_left,y1=Y_right)\n    plot(wait_vec,ylim= c(0,max(wait_vec)),main=\"Dwell time evolution\",ylab=\"dwell time (sec)\",xlab=\"path\")\n    abline(h=c(25,75),lty=2)\n  }\n  \n  timing = timing*path + sum(wait_vec)\n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"for plate of 50*100 mm.\\n\",\"application on the left side\\n\",\"Same as SA_2\\n\",\n                paste0(\"Volume used (µL): \",round(I*12*Drop_vol/1000*(Y_right-Y_left)/reso*path,3),\"\\n\"),\n                paste0(\"Estimated time: \",round(timing), \" sec = \",round(timing/60,2),\" min\"))\n  return(step)\n}\n\neat_table_Dev_in_X = function(step){\n  ## eat_table_Dev_in_X function V01,26 april 2017\n  # in each position, we fire every body, no need for nozzles\n  ## extract the needed information\n  table = step$table\n  \n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = round(inche/dpi,3)\n  \n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  Y = table[table[,1] == \"Y\",2] + 25\n  X_left = table[table[,1] == \"X_left\",2] \n  X_right = table[table[,1] == \"X_right\",2] \n  speed = table[table[,1] == \"speed\",2]\n  I = table[table[,1] == \"I\",2]\n  L = table[table[,1] == \"L\",2]\n  wait = table[table[,1] == \"wait\",2]\n  wait_inc = table[table[,1] == \"wait_inc\",2]\n  return = table[table[,1] == \"return\",2]\n  \n  S = 4095 ## may be integrate it for later in the table\n  \n  wait_vec = c()\n  for(i in seq(path)){\n    wait_vec = c(wait_vec,round(wait,3))\n    wait = wait*wait_inc\n  }\n  timing = ((X_right-X_left)/speed*2+(X_right-X_left)/reso*I*0.9/1000)\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"),\n                  paste0(\"G1 Y\",Y-reso*6.5,\" ; go in Y position\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  \n  ## begin gcode\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n    X = X_left\n    for(i in seq((X_right-X_left)/reso)){\n      gcode = c(gcode,\n                paste0(\"G1 X\",X,\" ; go in X position\"),\n                \"M400 ; Wait for current moves to finish \",\n                paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire inkjet bits\")\n      )\n      X = X + reso\n    }\n    if(wait != 0){gcode=c(gcode,paste0(\"G4 S\",wait_vec[k],\"; wait in seconds\"))}\n    if(return != 0){\n      X = X_right\n      for(i in seq((X_right-X_left)/reso)){\n        gcode = c(gcode,\n                  paste0(\"G1 X\",X,\" ; go in X position\"),\n                  \"M400 ; Wait for current moves to finish \",\n                  paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire inkjet bits\")\n        )\n        X = X - reso\n      }\n      if(wait != 0){gcode=c(gcode,paste0(\"G4 S\",wait_vec[k],\"; wait in seconds\"))}\n    }\n    gcode\n  })))\n  gcode = c(gcode,end_gcode)\n  \n  ## plot, need recall of Y positions\n  X_left = table[table[,1] == \"X_left\",2]\n  X_right = table[table[,1] == \"X_right\",2]\n  # Y = table[table[,1] == \"Y\",2]\n  wait = table[table[,1] == \"wait\",2]\n  plot_step=function() {\n    par(mfrow=c(1,2))\n    plot(c(1,100),c(1,100),ylim=c(100,0),xlim=c(0,100),type=\"n\",xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\")\n    segments(x0=X_left,x1=X_right,y0=Y)\n    plot(wait_vec,ylim= c(0,max(wait_vec)),main=\"Dwell time evolution\",ylab=\"dwell time (sec)\",xlab=\"path\")\n    abline(h=c(25,75),lty=2)\n  }\n  \n  timing = timing*path + sum(wait_vec)\n  volume = round(I*12*Drop_vol/1000*(X_right-X_left)/reso*path,3)\n  if(return != 0){\n    timing = timing *2\n    volume = volume*2\n  }\n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"for plate of 50*100 mm.\\n\",\"application on the left side\\n\",\"Same as SA_2\\n\",\n                paste0(\"Volume used (µL): \",volume,\"\\n\"),\n                paste0(\"Estimated time: \",round(timing), \" sec = \",round(timing/60,2),\" min\"))\n  return(step)\n}\n\n## function eat table for OC_manager\n\neat_table_Deriv = function(step){\n  # eat_table_Deriv function V01,21 february 2017\n  # extract the needed information\n  table = step$table\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  nozzle_X = 12;nozzle_Y = 1\n  plate_X = 100;plate_Y=100\n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  X=floor(plate_X/reso/nozzle_X)*nozzle_X;Y=floor(plate_Y/reso/nozzle_Y)*nozzle_Y\n  a = array(0,dim = c(X,Y,path))\n  ## fill the array\n  dist_bottom = ceiling(table[table[,1] == \"dist_bottom\",2]/reso)\n  dist_top = ceiling(table[table[,1] == \"dist_top\",2]/reso)\n  dist_gauche = ceiling(table[table[,1] == \"dist_gauche\",2]/reso)\n  band_length = ceiling(table[table[,1] == \"band_length\",2]/reso)\n  gap = ceiling(table[table[,1] == \"gap\",2]/reso)\n  nbr_band = table[table[,1] == \"nbr_band\",2]\n  dist_gauche_saved = dist_gauche\n  for(i in seq(nbr_band)){\n    a[dist_gauche:(dist_gauche+band_length),dist_bottom:dist_top,] = 1 ## X/Y inverse, \n    dist_gauche = dist_gauche+band_length+gap\n  }\n  \n  ## previously a_to_b\n  path=dim(a)[3]\n  ## redim array\n  b = array(0,dim=c(X/nozzle_X,Y,dim(a)[3]))\n  for(i in seq(path)){\n    for(j in seq(X/nozzle_X)){\n      for(k in seq(Y/nozzle_Y)){\n        b[j,k,i] = BinToDec(a[((j-1)*nozzle_X+1):(j*nozzle_X),k,i])\n      }\n    }\n  }\n  \n  ## previously b_to_gcode\n  I = table[table[,1] == \"I\",2];L=table[table[,1] == \"L\",2];\n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*table[table[,1] == \"speed\",2],\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso*nozzle_X/2+reso/2,by=reso*12,length.out = dim(b)[1]),4),\n    Y = round(seq(from=reso/2,by = reso,length.out = dim(b)[2]),4)\n  )\n  ## begin gcode\n  gcode = start_gcode\n  ## iterate\n  for(k in seq(dim(b)[3])){ # slice loop, need modulo for next loop\n    if(k %% 2 == 1){\n      s = seq(dim(b)[1])\n    }else{\n      s = seq(dim(b)[1]) %>% rev\n    }\n    for(i in s){ # X loop, need modulo\n      if(i %% 2 == 1){\n        s = seq(dim(b)[2])\n      }else{\n        s = seq(dim(b)[2]) %>% rev\n      }\n      for(j in s){\n        if(b[i,j,k] != 0){\n          gcode = c(gcode,paste0(\"G1 Y\",coordonate$X[i],\" X\",coordonate$Y[j],\" ; go in position\")) ## X and Y are inversed, carefull\n          gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n          gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",b[i,j,k],\" ; Fire inkjet bits\"))\n        }\n      }\n    }\n  }\n  gcode = c(gcode,end_gcode)\n  # b_to_gcode(b,start_gcode,end_gcode,table[table[,2] == \"I\",3])\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=\"the origin is not the same as usual, I must fix it\")\n    rasterImage(1-apply(a,c(1,2),mean),ybottom = 1,ytop=100,xleft = 1,xright=100) ## X/Y inverse, \n    # DLC::raster(1-apply(a,c(1,2),mean),xaxs=\"i\",yaxs=\"i\")\n    }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"still not but incomming\"\n  return(step)\n}\n\neat_table_Deriv_2 = function(step){\n  # eat_table_Deriv_2 function V01.1, 28 march 2017\n  # extract the needed information\n  table = step$table\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  nozzle_X = 12;nozzle_Y = 1\n  plate_X = 100;plate_Y=100\n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  X=floor(plate_X/reso/nozzle_X)*nozzle_X;Y=floor(plate_Y/reso/nozzle_Y)*nozzle_Y\n  a = array(0,dim = c(X,Y,path))\n  ## fill the array\n  X_bias = ceiling(table[table[,1] == \"X_bias\",2]/reso)\n  X_center = X - (ceiling(table[table[,1] == \"X_center\",2]/reso) + X_bias)\n  X_width = ceiling(table[table[,1] == \"X_width\",2]/reso)\n  Y_center = ceiling(table[table[,1] == \"Y_center\",2]/reso)\n  Y_width = ceiling(table[table[,1] == \"Y_width\",2]/reso)\n  \n  ## very messy here to incorporate the new convention\n  dist_bottom = X_center - X_width/2\n  dist_top = X_center + X_width/2\n  dist_gauche = Y_center - Y_width/2\n  band_length = Y_width\n  # gap = ceiling(table[table[,1] == \"gap\",2]/reso)\n  # nbr_band = table[table[,1] == \"nbr_band\",2]\n  # dist_gauche_saved = dist_gauche\n  # for(i in seq(nbr_band)){\n    a[dist_gauche:(dist_gauche+band_length),dist_bottom:dist_top,] = 1 ## X/Y inverse, \n    # dist_gauche = dist_gauche+band_length+gap\n  # }\n  \n  ## previously a_to_b\n  path=dim(a)[3]\n  ## redim array\n  b = array(0,dim=c(X/nozzle_X,Y,dim(a)[3]))\n  for(i in seq(path)){\n    for(j in seq(X/nozzle_X)){\n      for(k in seq(Y/nozzle_Y)){\n        b[j,k,i] = BinToDec(a[((j-1)*nozzle_X+1):(j*nozzle_X),k,i])\n      }\n    }\n  }\n  \n  ## previously b_to_gcode\n  I = table[table[,1] == \"I\",2];L=table[table[,1] == \"L\",2];direction=table[table[,1] == \"direction\",2]\n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*table[table[,1] == \"speed\",2],\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso*nozzle_X/2+reso/2,by=reso*12,length.out = dim(b)[1]),4),\n    Y = round(seq(from=reso/2,by = reso,length.out = dim(b)[2]),4)\n  )\n  ## begin gcode\n  gcode = start_gcode\n  ## iterate\n  if(direction == 0){\n    for(k in seq(dim(b)[3])){ # slice loop, need modulo for next loop\n      if(k %% 2 == 1){\n        s = seq(dim(b)[1])\n      }else{\n        s = seq(dim(b)[1]) %>% rev\n      }\n      for(i in s){ # X loop, need modulo\n        if(i %% 2 == 1){\n          s = seq(dim(b)[2])\n        }else{\n          s = seq(dim(b)[2]) %>% rev\n        }\n        for(j in s){\n          if(b[i,j,k] != 0){\n            gcode = c(gcode,paste0(\"G1 Y\",coordonate$X[i],\" X\",coordonate$Y[j],\" ; go in position\")) ## X and Y are inversed, carefull\n            gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n            gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",b[i,j,k],\" ; Fire inkjet bits\"))\n          }\n        }\n      }\n    }\n  }else{\n    for(k in seq(dim(b)[3])){ # slice loop, need modulo for next loop\n      if(k %% 2 == 1){\n        s = seq(dim(b)[2])\n      }else{\n        s = seq(dim(b)[2]) %>% rev\n      }\n      for(i in s){ # X loop, need modulo\n        if(i %% 2 == 1){\n          s = seq(dim(b)[1])\n        }else{\n          s = seq(dim(b)[1]) %>% rev\n        }\n        for(j in s){\n          if(b[j,i,k] != 0){\n            gcode = c(gcode,paste0(\"G1 Y\",coordonate$X[j],\" X\",coordonate$Y[i],\" ; go in position\")) ## X and Y are inversed, carefull\n            gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n            gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",b[j,i,k],\" ; Fire inkjet bits\"))\n          }\n        }\n      }\n    }\n  }\n  \n  gcode = c(gcode,end_gcode)\n  # b_to_gcode(b,start_gcode,end_gcode,table[table[,2] == \"I\",3])\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"(0,0) in upper right\")\n    rasterImage(1-apply(a,c(1,2),mean),ybottom = 100,ytop=0,xleft = 1,xright=100) ## X/Y inverse, \n    abline(v=c(X_bias*reso,100-X_bias*reso),lty=2)\n    # DLC::raster(1-apply(a,c(1,2),mean),xaxs=\"i\",yaxs=\"i\")\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = paste0(\"Volume used: \", I*Drop_vol*X_width*Y_width/1000,\" µL\")\n  return(step)\n}\n\neat_table_Deriv_3 = function(step){\n  # eat_table_Deriv_3 function V01.1, 29 march 2017\n  # simple line in the X direction\n  # extract the needed information\n  table = step$table;SA_table = step$appli_table\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  nozzle_X = 1\n  plate_X = 100;plate_Y=100\n  ## empty array\n  X=floor(plate_X/reso/nozzle_X)*nozzle_X\n  a = rep(0,X)\n  ## extract info from table\n  X_center = (ceiling(table[table[,1] == \"X_center\",2]/reso))\n  X_width = ceiling(table[table[,1] == \"X_width\",2]/reso)\n  Y_center = table[table[,1] == \"Y_center\",2]\n  gap = table[table[,1] == \"gap\",2]\n  L=table[table[,1] == \"L\",2];speed = 60*table[table[,1] == \"speed\",2]\n  path = table[table[,1] == \"path\",2]\n  \n  ## very messy here to incorporate the new convention\n  dist_bottom = X_center - X_width/2\n  dist_top = X_center + X_width/2\n  a[dist_bottom:dist_top] = 1\n  \n  \n  ## previously b_to_gcode\n\n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",speed,\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso/2,by=reso,length.out = length(a)),4)\n  )\n  ## begin gcode\n  ## iterate\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n    for(band in seq(nrow(SA_table))){\n      gcode = c(gcode,\n                paste0(\"G1 Y\",Y_center+(band-1)*gap,\"; go in Y position\"))\n      if(SA_table$Use[band]){\n        I = SA_table$I[band]\n        for(Repeat in seq(SA_table$Repeat[band])){\n          s = seq(length(a))\n          for(i in s){ # X loop, need modulo\n            if(a[i] != 0){\n              gcode = c(gcode,paste0(\"G1 X\",coordonate$X[i],\" ; go in position\"))\n              gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n              gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",4095,\" ; Fire all inkjet bits\"))\n            }\n          }\n        }\n      }\n    }\n    gcode\n  })))\n  \n  gcode = c(gcode,end_gcode)\n  # b_to_gcode(b,start_gcode,end_gcode,table[table[,2] == \"I\",3])\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"development in X direction\\nfor saturation chamber\")\n    for(band in seq(nrow(SA_table))){\n      if(SA_table$Use[band]){\n        symbols(x=table[table[,1] == \"X_center\",2],y=Y_center+(band-1)*gap,rectangles = rbind(c(table[table[,1] == \"X_width\",2],3)),add = T,inches = F,bg = 1)\n      }\n    }\n    abline(h=c(24,100-24),lty=2,lwd=2)\n    # rasterImage(1-apply(a,c(1,2),mean),ybottom = 100,ytop=0,xleft = 1,xright=100) ## X/Y inverse, \n    # abline(v=c(X_bias*reso,100-X_bias*reso),lty=2)\n    # DLC::raster(1-apply(a,c(1,2),mean),xaxs=\"i\",yaxs=\"i\")\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = paste0(\"Band \",seq(nrow(SA_table)),\": Volume used: \", SA_table$I*Drop_vol*X_width*12*SA_table$Repeat*path/1000,\" µL ; area = \",reso*12*X_width*reso,\" mm2\\n\")\n  return(step)\n}\n\neat_table_Deriv_vert = function(step){\n  # eat_table_Deriv_vert function V01,16 march 2017\n  # extract the needed information\n  table = step$table\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  nozzle_X = 1;nozzle_Y = 12\n  plate_X = 100;plate_Y=100\n  ## empty array\n  path = table[table[,1] == \"path\",2]\n  X=floor(plate_X/reso/nozzle_X)*nozzle_X;Y=floor(plate_Y/reso/nozzle_Y)*nozzle_Y\n  a = array(0,dim = c(X,Y,path))\n  ## fill the array\n  dist_bottom = ceiling(table[table[,1] == \"dist_bottom\",2]/reso)\n  dist_top = ceiling(table[table[,1] == \"dist_top\",2]/reso)\n  dist_gauche = ceiling(table[table[,1] == \"dist_gauche\",2]/reso)\n  band_length = ceiling(table[table[,1] == \"band_length\",2]/reso)\n  gap = ceiling(table[table[,1] == \"gap\",2]/reso)\n  nbr_band = table[table[,1] == \"nbr_band\",2]\n  dist_gauche_saved = dist_gauche\n  for(i in seq(nbr_band)){\n    a[dist_bottom:dist_top,dist_gauche:(dist_gauche+band_length),] = 1 ## X/Y inverse, \n    dist_gauche = dist_gauche+band_length+gap\n  }\n  #raster(a[,,1])\n  dist_gauche = dist_gauche_saved\n  ## previously a_to_b\n  path=dim(a)[3]\n  ## redim array\n  b = array(0,dim=c(X/nozzle_X,Y/nozzle_Y,dim(a)[3]))\n  for(i in seq(path)){\n    for(j in seq(X/nozzle_X)){\n      for(k in seq(Y/nozzle_Y)){\n        b[j,k,i] = BinToDec(a[((j-1)*nozzle_X+1):(j*nozzle_X),((k-1)*nozzle_Y+1):(k*nozzle_Y),i])\n      }\n    }\n  }\n  raster(b[,,1]%>%normalize)\n  ## previously b_to_gcode\n  I = table[table[,1] == \"I\",2];L=table[table[,1] == \"L\",2];speed = 60*table[table[,1] == \"speed\",2]\n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",speed,\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso*nozzle_X/2+reso/2,by=reso*nozzle_X,length.out = dim(b)[1]),4),\n    Y = round(seq(from=reso*nozzle_Y/2+reso/2,by = reso*nozzle_Y,length.out = dim(b)[2]),4)\n  )\n  ## begin gcode\n  gcode = start_gcode\n  ## iterate\n  for(k in seq(dim(b)[3])){ # slice loop, need modulo for next loop\n    if(k %% 2 == 1){\n      s = seq(dim(b)[1])\n    }else{\n      s = seq(dim(b)[1]) %>% rev\n    }\n    for(i in s){ # X loop, need modulo\n      if(i %% 2 == 1){\n        s = seq(dim(b)[2])\n      }else{\n        s = seq(dim(b)[2]) %>% rev\n      }\n      for(j in s){\n        if(b[i,j,k] != 0){\n          gcode = c(gcode,paste0(\"G1 X\",coordonate$X[i],\" Y\",coordonate$Y[j],\" ; go in position\")) ## X and Y are inversed, carefull\n          gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n          gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",b[i,j,k],\" ; Fire inkjet bits\"))\n        }\n      }\n    }\n  }\n  gcode = c(gcode,end_gcode)\n  # b_to_gcode(b,start_gcode,end_gcode,table[table[,2] == \"I\",3])\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=\"the origin is not the same as usual, I must fix it\")\n    rasterImage(1-apply(a,c(1,2),mean),ybottom = 1,ytop=100,xleft = 1,xright=100) ## X/Y inverse, \n    # DLC::raster(1-apply(a,c(1,2),mean),xaxs=\"i\",yaxs=\"i\")\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"still not but incomming\"\n  return(step)\n}\n\neat_table_Deriv_single_nozzle = function(step){\n  # eat_table_Deriv_single_nozzle V01,7 may 2017\n  ## print derivatisation reagent with a single nozzle\n  ## bands are in X\n  # extract the needed information\n  table = step$table;\n  SA_table = step$appli_table\n  dist_gauche = table[table[,1] == \"dist_gauche\",2]\n  gap = table[table[,1] == \"gap\",2]\n  speed = table[table[,1] == \"speed\",2]\n  dist_bottom = table[table[,1] == \"dist_bottom\",2]\n  dist_top = table[table[,1] == \"dist_top\",2]\n  nbr_band = table[table[,1] == \"nbr_band\",2] ## warning\n  # I=table[table[,1] == \"I\",2];\n  path=table[table[,1] == \"path\",2];\n  L=table[table[,1] == \"L\",2];\n  W=table[table[,1] == \"wait\",2];\n  nozzle = table[table[,1] == \"nozzle\",2]\n  ## empty array\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  \n  S = rep(0,12)\n  for(i in seq(12)){if(i %in% as.numeric(nozzle)){S[i] = 1}};S = BinToDec(S)\n  shift = round((1 - nozzle)*reso,3)\n  \n  Y_coord = round(seq(from = dist_bottom,to = dist_top,by=reso),3) + shift\n  \n  ## iterate\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n    for(band in seq(nrow(SA_table))){\n      gcode = c(gcode,paste0(\"G1 X\",dist_gauche+(band-1)*(gap),\"; go in X\"))\n      if(SA_table$Use[band]){\n        I = SA_table$I[band]\n        for(Repeat in seq(SA_table$Repeat[band])){\n          for(i in Y_coord){ # X loop, need modulo\n            gcode = c(gcode,paste0(\"G1 Y\",i,\" ; go in position - path: \",k)) ## reinsert k here\n            gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n            gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire\"))\n          }\n        }\n      }\n    }\n    if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n    return(gcode)\n  }))\n  )\n  # for(k in seq(path)){\n  #   for(band in seq(nrow(SA_table))){\n  #     gcode = c(gcode,paste0(\"G1 X\",dist_gauche+(band-1)*(gap),\"; go in X\"))\n  #     if(SA_table$Use[band]){\n  #       I = SA_table$I[band]\n  #       for(Repeat in seq(SA_table$Repeat[band])){\n  #         for(i in Y_coord){ # X loop, need modulo\n  #           gcode = c(gcode,paste0(\"G1 Y\",i,\" ; go in position - path: \",k))\n  #           gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n  #           gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire\"))\n  #         }\n  #       }\n  #     }\n  #   }\n  #   if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n  # }\n  gcode = c(gcode,end_gcode)\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=paste0(length(gcode),\" GCODE commands\"))\n    for(band in seq(nrow(SA_table))){\n      if(SA_table$Use[band]){\n        segments(y0 = dist_bottom,\n                 y1 = dist_top,\n                 x0 = dist_gauche+(band-1)*(gap)\n        )\n      }\n    }\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"This method is for 10 by 10 plates in the heated plate holder\\nband are in X and development in Y\\n\",\n                paste0(\"Band \",seq(nrow(SA_table)),\": Volume used: \", SA_table$I*Drop_vol*ceiling((dist_top - dist_bottom)/reso)*SA_table$Repeat*path/1000,\" µL\\n\")\n  )\n  return(step)\n}\n\neat_table_SA = function(step){\n  # eat_table_SA function V012,14 march 2017\n  # extract the needed information\n  table = step$table;SA_table = step$appli_table\n  dist_gauche = table[table[,1] == \"dist_gauche\",2]\n  band_length = table[table[,1] == \"band_length\",2]\n  gap = table[table[,1] == \"gap\",2]\n  speed = table[table[,1] == \"speed\",2]\n  dist_bottom = table[table[,1] == \"dist_bottom\",2]\n  I=table[table[,1] == \"I\",2];\n  L=table[table[,1] == \"L\",2];\n  W=table[table[,1] == \"wait\",2];\n  nozzle = table[table[,1] == \"nozzle\",2]\n  ## empty array\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  # nozzle_Y = 12 ## X/Y inverse, \n  nozzle_X = 1 ## X/Y inverse, \n  plate_X=100\n  path = max(SA_table[,3])\n  X=floor(plate_X/reso/nozzle_X)*nozzle_X## X/Y inverse, \n  a = array(0,dim = c(X,path))\n  ## fill the array\n  dist_gauche = ceiling(dist_gauche/reso)\n  band_length = ceiling(band_length/reso)\n  gap = ceiling(gap/reso)\n  dist_gauche_saved = dist_gauche\n  for(i in seq(nrow(SA_table))){\n    if(SA_table$Use[i]){\n      a[dist_gauche:(dist_gauche+band_length),1:SA_table$Repeat[i]] = 1\n    }\n    dist_gauche = dist_gauche+band_length+gap\n    if(dist_gauche+band_length > X){ break()}\n  }\n  shift = round((1 - nozzle)*reso,3)\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"),\n                  paste0(\"G1 Y\",dist_bottom+shift,\" ; go in Y position\") ## X/Y inverse, include shift\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## previously function a_to_gcode_X_fix\n  \n  S = rep(0,12)\n  if(nozzle == 13){\n    S = 4095\n  }else{\n    for(i in seq(12)){if(i %in% as.numeric(nozzle)){S[i] = 1}};S = BinToDec(S)\n  }\n  \n  \n  ## get coord\n  coordonate = list(\n    X = round(seq(from=reso/2,by = reso*nozzle_X,length.out = dim(a)[1]),3) ## X/Y inverse, remove shift\n  )\n  ## begin gcode\n  gcode = start_gcode\n  ## iterate\n  for(k in seq(dim(a)[2])){ # path loop, need modulo for next loop\n    if(sum(a[,k]) != 0){\n      if(k %% 2 == 1){\n        s = seq(dim(a)[1])\n      }else{\n        s = seq(dim(a)[1]) %>% rev\n      }\n      for(j in s){\n        if(a[j,k] != 0){\n          gcode = c(gcode,paste0(\"G1 X\",coordonate$X[j],\" ; go in position\")) ## X/Y inverse, \n          gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n          gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire inkjet bits\"))\n        }\n      }\n      if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n    }\n  }\n  gcode = c(gcode,end_gcode)\n  \n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=\"the origin is not the same as usual, I must fix it\")\n    rasterImage(t(1-apply(a,c(1),mean)),ybottom = dist_bottom,ytop=dist_bottom+0.5,xleft = 1,xright=100) ## X/Y inverse, \n    # abline(v=seq(from=1,to=100,by=10))\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"still not but incomming\"\n  return(step)\n}\n\n\neat_table_SA_2 = function(step){\n  # eat_table_SA_2 function V011,13 april 2017\n  ## for \n  # extract the needed information\n  table = step$table;\n  SA_table = step$appli_table\n  dist_gauche = table[table[,1] == \"dist_gauche\",2]\n  band_length = table[table[,1] == \"band_length\",2]\n  gap = table[table[,1] == \"gap\",2]\n  speed = table[table[,1] == \"speed\",2]\n  dist_bottom = table[table[,1] == \"dist_bottom\",2]\n  # I=table[table[,1] == \"I\",2];\n  path=table[table[,1] == \"path\",2];\n  L=table[table[,1] == \"L\",2];\n  W=table[table[,1] == \"wait\",2];\n  nozzle = table[table[,1] == \"nozzle\",2]\n  ## empty array\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  nozzle_Y = 1 ## use only one nozzle\n  plate_Y=100\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"),\n                  paste0(\"G1 X\",dist_bottom,\" ; go in X position\") \n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## previously function a_to_gcode_X_fix\n  \n  S = rep(0,12)\n  for(i in seq(12)){if(i %in% as.numeric(nozzle)){S[i] = 1}};S = BinToDec(S)\n  shift = round((1 - nozzle)*reso,3)\n  \n  ## begin gcode\n  ## iterate\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n    for(band in seq(nrow(SA_table))){\n      Y_coord = round(seq(from = dist_gauche+shift+(band-1)*(gap+band_length),by=reso,length.out = ceiling(band_length/reso)),3)+25# 25 added so user doesn't care\n      # gcode = c(gcode,paste0(\"G1 Y\",dist_gauche+shift+(band-1)*(gap+band_length),\"; go in Y position\"))\n      if(SA_table$Use[band]){\n        I = SA_table$I[band]\n        for(Repeat in seq(SA_table$Repeat[band])){\n          for(i in Y_coord){ # X loop, need modulo\n            gcode = c(gcode,paste0(\"G1 Y\",i,\" ; go in position - path: \",k))\n            gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n            gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire\"))\n          }\n        }\n      }\n    }\n    if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n    gcode\n  })))\n  gcode = c(gcode,end_gcode)\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\")\n    for(band in seq(nrow(SA_table))){\n      if(SA_table$Use[band]){\n        segments(x0 = dist_bottom,\n                 y0 = dist_gauche+shift+(band-1)*(gap+band_length)+25,\n                 y1 = dist_gauche+shift+(band-1)*(gap+band_length)+band_length+25)\n      }\n    }\n    abline(h=c(25,75),lty=2)\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"This method is for 5 by 10 plates in the multipurpose plate holder\\nthe plate is store horizontally \\nthe distance convention is made for the exterior of the plate\\n\",\n                paste0(\"Band \",seq(nrow(SA_table)),\": Volume used: \", SA_table$I*Drop_vol*ceiling(band_length/reso)*SA_table$Repeat*path/1000,\" µL\\n\")\n  )\n  return(step)\n}\n\neat_table_SA_in_X = function(step){\n  # eat_table_SA_in_X function V01,26 april 2017\n  ## for \n  # extract the needed information\n  table = step$table;\n  SA_table = step$appli_table\n  dist_gauche = table[table[,1] == \"dist_gauche\",2]\n  band_length = table[table[,1] == \"band_length\",2]\n  gap = table[table[,1] == \"gap\",2]\n  speed = table[table[,1] == \"speed\",2]\n  dist_bottom = table[table[,1] == \"dist_bottom\",2]\n  # I=table[table[,1] == \"I\",2];\n  path=table[table[,1] == \"path\",2];\n  L=table[table[,1] == \"L\",2];\n  W=table[table[,1] == \"wait\",2];\n  nozzle = table[table[,1] == \"nozzle\",2]\n  ## empty array\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  nozzle_Y = 1 ## use only one nozzle\n  plate_Y=100\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\")\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## previously function a_to_gcode_X_fix\n  \n  S = rep(0,12)\n  for(i in seq(12)){if(i %in% as.numeric(nozzle)){S[i] = 1}};S = BinToDec(S)\n  shift = round((1 - nozzle)*reso,3)\n  \n  ## begin gcode\n  gcode = c(start_gcode,\n            paste0(\"G1 Y\",dist_bottom+shift,\" ; go in Y position\") \n            \n  )\n  ## iterate\n  for(k in seq(path)){\n    for(band in seq(nrow(SA_table))){\n      X_coord = round(seq(from = dist_gauche+(band-1)*(gap+band_length),by=reso,length.out = ceiling(band_length/reso)),3)# 25 added so user doesn't care\n      # gcode = c(gcode,paste0(\"G1 X\",dist_gauche+shift+(band-1)*(gap+band_length),\"; go in Y position\"))\n      if(SA_table$Use[band]){\n        I = SA_table$I[band]\n        for(Repeat in seq(SA_table$Repeat[band])){\n          for(i in X_coord){ # X loop, need modulo\n            gcode = c(gcode,paste0(\"G1 X\",i,\" ; go in position - path: \",k))\n            gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n            gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire\"))\n          }\n        }\n      }\n    }\n    if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n  }\n  gcode = c(gcode,end_gcode)\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\")\n    for(band in seq(nrow(SA_table))){\n      if(SA_table$Use[band]){\n        segments(y0 = dist_bottom,\n                 x0 = dist_gauche+shift+(band-1)*(gap+band_length),\n                 x1 = dist_gauche+shift+(band-1)*(gap+band_length)+band_length)\n      }\n    }\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"This method is for 10 by 10 plates in the multipurpose plate holde\\nthe plate is store horizontally\\nthe distance convention is made for the exterior of the plate\\n\",\n                paste0(\"Band \",seq(nrow(SA_table)),\": Volume used: \", SA_table$I*Drop_vol*ceiling(band_length/reso)*SA_table$Repeat*path/1000,\" µL\\n\")\n  )\n  return(step)\n}\n\n\neat_table_SA_grid= function(step){\n  # eat_table_SA_grid function V011,29 may 2017\n  ## print a grid of band like free mode in ATS4\n  ## little different for the SA_table as the number of row is the number of band\n  ## band are in X and row in Y\n  # extract the needed information\n  table = step$table;\n  SA_table = step$appli_table\n  colnames(step$appli_table)[1] = \"Row\"\n  dist_gauche = table[table[,1] == \"dist_gauche\",2]\n  band_length = table[table[,1] == \"band_length\",2]\n  gap = table[table[,1] == \"gap\",2]\n  speed = table[table[,1] == \"speed\",2]\n  dist_bottom = table[table[,1] == \"dist_bottom\",2]\n  nbr_band = table[table[,1] == \"nbr_row\",2] ## warning\n  nbr_row = table[table[,1] == \"nbr_band\",2] ## warning\n  row_Y_gap = table[table[,1] == \"row_Y_gap\",2]\n  # I=table[table[,1] == \"I\",2];\n  path=table[table[,1] == \"path\",2];\n  L=table[table[,1] == \"L\",2];\n  W=table[table[,1] == \"wait\",2];\n  nozzle = table[table[,1] == \"nozzle\",2]\n  ## empty array\n  inche = 25.4 # mm/inche\n  dpi = 96\n  reso = inche/dpi\n  \n  start_gcode = c(\"G28 X0; home X axis\",\n                  \"G28 Y0; home Y axis\",\n                  \"G21 ; set units to millimeters\",\n                  \"G90 ; use absolute coordinates\",\n                  paste0(\"G1 F\",60*speed,\" ; set speed in mm per min for the movement\"),\n                  \"G1 Y90\"\n  )\n  end_gcode = c(\"G28 X0; home X axis\",\n                \"G28 Y0; home Y axis\",\n                \"M84     ; disable motors\")\n  ## previously function a_to_gcode_X_fix\n  \n  S = rep(0,12)\n  for(i in seq(12)){if(i %in% as.numeric(nozzle)){S[i] = 1}};S = BinToDec(S)\n  shift = round((1 - nozzle)*reso,3)\n  Y_coord = c()\n  for(i in seq(nbr_row)){\n    Y_coord = c(Y_coord,(i-1)*row_Y_gap+shift+dist_bottom)\n  }\n  \n  ## iterate\n  gcode = c(start_gcode,unlist(lapply(seq(path),function(k){\n    gcode = c()\n      for(row in seq(nbr_row)){\n        if(SA_table$Use[row]){\n          for(Repeat in seq(SA_table$Repeat[row])){\n            gcode = c(gcode,paste0(\"G1 Y\",Y_coord[row]))\n            I = SA_table$I[row]\n            for(band in seq(nbr_band)){\n              X_coord = round(seq(from = dist_gauche+(band-1)*(gap+band_length),by=reso,length.out = ceiling(band_length/reso)),3)\n              for(i in X_coord){ # X loop, need modulo\n                gcode = c(gcode,paste0(\"G1 X\",i,\" ; go in position - path: \",k))\n                gcode = c(gcode,\"M400 ; Wait for current moves to finish \")\n                gcode = c(gcode,paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S,\" ; Fire\"))\n              }\n            }\n          }\n        }\n      }\n      if(W != 0){gcode=c(gcode,paste0(\"G4 S\",W,\"; wait in seconds\"))}\n      return(gcode)\n    }\n  )))\n  gcode = c(gcode,end_gcode)\n  \n  plot_step=function() {\n    plot(c(1,100),c(1,100),type=\"n\",xlim=c(0,100),ylim=c(100,0),xlab=\"X\",ylab=\"Y\",main=\"Origin in upper left corner\",sub=paste0(length(gcode),\" GCODE commands\"))\n    for(row in seq(nbr_row)){\n      if(SA_table$Use[row]){\n        y = Y_coord[row]\n        for(band in seq(nbr_band)){\n          segments(y0 = y,\n                   x0 = dist_gauche+shift+(band-1)*(gap+band_length),\n                   x1 = dist_gauche+shift+(band-1)*(gap+band_length)+band_length)\n        }\n      }\n    }\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = c(\"This step is for 10 by 10 plates,\\nthe row are iterate in Y and the band in X\\nCalcul is made with linomat conventions\\n\",\n                paste0(\"Row \",seq(nrow(SA_table)),\": Volume used per band: \", SA_table$I*Drop_vol*ceiling(band_length/reso)*SA_table$Repeat*path/1000,\" µL\\n\")\n  )\n  return(step)\n}\n\n\neat_table_heating = function(step){\n  # eat_table_heating function V011,24 february 2017\n  # very simple anyway, home, start heating, and wait the needed time, then home again\n  # extract the needed information\n  table = step$table\n  Temperature=table[table[,1] == \"Temperature\",2];Time=table[table[,1] == \"Time\",2]\n  \n  gcode = c(\"G28 X0; home X axis\",\n            \"G28 Y0; home Y axis\",\n            paste0(\"M190 S\",Temperature,\" ; set temperature, wait to reach, use M140 to set and go to the next one\"),\n            paste0(\"G4 s\",Time*60,\" ; time wait in secondes\"),\n            \"M190 S0 ; set temperature off\",\n            \"G28 X0; home X axis\",\n            \"G28 Y0; home Y axis\"\n  )\n  \n  plot_step=function() {\n    plot(c(1),c(1),type=\"n\",main=\"No plot for heating step\")\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"still not but incomming\"\n  return(step)\n}\n\neat_table_Scan_dart = function(step){\n  # eat_table_Scan_dart function V011,07 March 2017\n  # very simple anyway, home, start heating, and wait the needed time, then home again\n  # extract the needed information\n  table = step$table\n  nbr_band=table[table[,1] == \"nbr_band\",2];\n  speed_travel=table[table[,1] == \"speed_travel\",2]\n  speed_scan=table[table[,1] == \"speed_scan\",2]\n  gap=table[table[,1] == \"gap\",2]\n  dist_gauche=table[table[,1] == \"dist_gauche\",2]\n  Y_start=table[table[,1] == \"Y_start\",2]\n  Y_end=table[table[,1] == \"Y_end\",2]\n  M42=table[table[,1] == \"M42\",2]\n  \n  gcode = c( ## begin Gcode\n    \"M106 S255; fan on, for the 12v of the end stops\",\n    \"G28 X0; home X axis\",\n    \"G28 Y0; home X axis\",\n    \"G21 ; set units to millimeters\",\n    \"G90 ; use absolute coordinates\"\n  )\n  for(i in 0:(nbr_band-1)){\n    gcode = c(gcode, ## fill gcode\n            paste0(\"G1 F\",60*speed_travel,\" ; set speed in mm per min for the travel movement\"),\n            \"G1 X0; go in X0\",\n            \"G1 Y0; go in Y0\",\n            paste0(\"G1 X\",dist_gauche + i*gap,\" ; go in X band position\"),\n            paste0(\"G1 Y\",Y_start,\" ; go in Y start\"),\n            if(as.logical(M42)){c(\"M42 P63 S1;set pin 63 to high\",\"G4 P20;wait 20 ms\",\"M42 P63 S0;set pin 63 to low\")},\n            paste0(\"G1 F\",60*speed_scan,\" ; set speed in mm per min for the scan movement\"),\n            paste0(\"G1 Y\",Y_end,\" ; go in Y end\")\n    )\n  }\n  gcode = c(gcode, ## end gcode\n            \"G28 X0; go in X0\",\n            \"G28 Y0; go in Y0\",\n            \"M84     ; disable motors\"\n  )\n  \n  plot_step=function() {\n    plot(x=0,y=0,type=\"n\",xlim=c(0,100),ylim=c(0,100),xlab=\"X\",ylab=\"Y\",sub = \"Careful of X, Y and direction for first scans\")\n    ## add stuff on the plate\n    for(i in 0:(nbr_band-1)){\n      segments(x0=dist_gauche + i*gap,\n               y0=Y_start,y1=Y_end)\n    }\n  }\n  \n  # replace the parts\n  step$gcode = gcode\n  step$plot = plot_step\n  step$info = \"Calcul from the middle of the band (ATS4 convention)\\nBe carefull with X and Y inversion\"\n  return(step)\n}\n\neat_table = list(\n  LP = eat_table_LP,\n  LP_2 = eat_table_LP_2,\n  SA = eat_table_SA,\n  SA_2 = eat_table_SA_2,\n  SA_in_X = eat_table_SA_in_X,\n  SA_grid = eat_table_SA_grid,\n  SA_prep = eat_table_SA_prep,\n  Dev = eat_table_Dev,\n  Dev_2 = eat_table_Dev_2,\n  Dev_in_X = eat_table_Dev_in_X,\n  Deriv = eat_table_Deriv,\n  Deriv_2 = eat_table_Deriv_2,\n  Deriv_3 = eat_table_Deriv_3,\n  Deriv_single_nozzle = eat_table_Deriv_single_nozzle,\n  Deriv_vert = eat_table_Deriv_vert,\n  heating = eat_table_heating,\n  Scan_dart = eat_table_Scan_dart\n)",
    "created" : 1504877841736.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "6|30|101|0|\n103|32|192|0|\n195|31|280|0|\n463|33|556|0|\n776|38|870|0|\n970|30|1065|0|\n1331|35|1356|0|\n1358|37|1411|0|\n",
    "hash" : "3802673169",
    "id" : "12AD92C6",
    "lastKnownWriteTime" : 1506675658,
    "last_content_update" : 1506675658993,
    "path" : "~/MEGA/OC/Software/OC_manager/eat_table.R",
    "project_path" : "eat_table.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}