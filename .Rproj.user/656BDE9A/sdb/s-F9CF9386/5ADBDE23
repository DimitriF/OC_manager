{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(rPython)\nlibrary(DLC)\n\nf.read.image = function(source,height=NULL,Normalize=F,ls.format=F){\n  ls <- list()\n  for(i in source){\n    try(data<-readTIFF(i,native=F)) # we could use the magic number instead of try here\n    try(data<-readJPEG(source=i,native=F))\n    try(data<-readPNG(source=i,native=F))\n    if(!is.null(height)){\n      data <- redim.array(data,height)\n    }\n    if(Normalize == T){data <- data %>% normalize}\n    ls[[i]]<- data\n  }\n  if(ls.format == F){\n    data <- abind(ls,along=2)\n  }else{\n    data <- ls\n  }\n  return(data)\n}\n\nsource(\"config.R\")\n\nshinyServer(function(input, output,session) {\n  \n  connect = reactiveValues(login = login, board = board,Visa = NULL)\n  # connect = reactiveValues(login = login, board = board,Visa = \"admin\")``\n  source(\"functions.R\")\n  source(\"server_visu.R\",local = T)\n  source(\"server_TLC_MS.R\",local = T)\n  source(\"server_ink_test.R\",local = T)\n  python.load(\"setup.py\")\n  session$onSessionEnded(function() {\n    # if(connect$board){\n      python.call(\"close_connections\")\n      # put it in the log\n      # write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Board disconnection\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n      \n    # }\n    # if(connect$login){\n      # put it in the log\n      # write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Sign out\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    # }\n  })\n  \n  output$Login = renderUI({\n    if(!connect$login){\n      tagList(\n        textInput(\"Visa\",\"Visa\",\"admin\"),\n        passwordInput(\"parola\",\"password\",value = \"\"),\n        actionButton(\"Login_connect\",\"connect\")\n      )\n    }else{\n      tagList(\n        h6(paste0(connect$Visa,\" connected\")),\n        actionButton(\"Login_disconnect\",\"disconnect\")\n      )\n    }\n  })\n  \n\n  observeEvent(input$Shutdown,{\n    system(\"sudo shutdown now\")\n  })\n  observeEvent(input$Reboot,{\n    system(\"sudo reboot\")\n  })\n  observeEvent(input$Login_connect,{\n    t = read.csv2(\"logins.csv\")\n    if(t[t$Visa == input$Visa,2] == input$parola){\n      connect$login = T\n      connect$Visa = input$Visa\n      # put it in the log\n      write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Sign in\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    }else{\n      # put it in the log\n      write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Connection attempt\",\";\",input$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n      \n    }\n  })\n  observeEvent(input$Login_disconnect,{\n    connect$login = F\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Sign out\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    \n    if(!board){ ## must check if not in development, cf config.R file\n      if(connect$board){\n        python.call(\"close_connections\")\n        # put it in the log\n        write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Board disconnection\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n        connect$board = F\n      }\n    }\n  })\n  \n  output$Serial_port = renderUI({\n    input$Serial_port_refresh\n    if(input$Serial_windows){\n      selectizeInput(\"Serial_port\",\"select Serial port\",choices = c(\"COM3\",\"COM4\"))\n    }else{\n      selectizeInput(\"Serial_port\",\"select Serial port\",choices = dir(\"/dev/\",pattern = \"ACM\",full.names = T))\n    }\n  })\n  output$Serial_port_connect = renderUI({\n    validate(\n      need(connect$login,\"Please login\")\n    )\n    if(!connect$board){\n      actionButton(\"Serial_port_connect\",\"connect the board\")\n    }else{\n      actionButton(\"Serial_port_disconnect\",\"disconnect the board\")\n    }\n  })\n  observeEvent(input$Serial_port_connect,{\n    python.call(\"connect_board\",input$Serial_port)\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Board connection\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    connect$board = T\n  })\n  observeEvent(input$Serial_port_disconnect,{\n    python.call(\"close_connections\")\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Connection;\",NA,\";\",\"Board disconnection\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    connect$board = F\n  })\n  observeEvent(input$Serial_port_disconnect_bis,{\n    python.call(\"close_connections\")\n    connect$board = F\n  })\n  \n  TempInvalidate <- reactiveTimer(2000)\n  output$LP_control_1 = renderUI({\n    validate(\n      need(connect$board,\"Please connect the board\")\n    )\n    TempInvalidate()\n    full = python.call(\"get_temp\")\n    # full = gsub(pattern = \"ok T:0.0 /0.0 B:\",x = full,replacement = \"Bed temp: \")\n    # full = gsub(pattern = \"@:0 B@:0\",x = full,replacement = \"°C\")\n    tagList(\n      h6(full)\n    )\n  })\n  output$LP_control_2 = renderUI({\n    validate(\n      need(connect$board,\"Please connect the board\")\n    )\n    tagList(\n      textInput(\"LP_file_name\",\"file name\",paste0(input$LP_first_appli,\"_\",input$LP_Y_length,\"_\",input$LP_gap,\"_\",\n                                                  input$LP_nbr_track,\"_\",input$LP_microL_per_dm,\"_\",\n                                                  input$LP_Z_offset,\"_\",input$LP_speed)),\n      \n      actionButton(\"LP_action\",\"Launch Gcode\"),\n      uiOutput(\"LP_infoGcode\")\n    )\n  })\n  output$LP_control_3 = renderUI({\n    validate(\n      need(connect$board,\"Please connect the board\")\n    )\n    tagList(\n      numericInput(\"temperature\",\"temp °C\",105),\n      actionButton(\"set_temp\",\"Set\"),\n      actionButton(\"LP_E1\",label = \"Extrude 1 mm\"),\n      actionButton(\"LP_E5\",label = \"Extrude 5 mm\")\n    )\n  })\n  observeEvent(input$set_temp,{\n    python.call(\"set_temp\",input$temperature)\n  })\n  observeEvent(input$LP_action,{\n    # create the gcode\n    LP_file = paste0(\"gcode/\",format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),input$LP_file_name,\".gcode\")\n    Log = LP_file\n    fileConn<-file(LP_file)\n    writeLines(LP_gcode(), fileConn)\n    close(fileConn)\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"layer_printing;\",LP_file,\";\",Log,\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    # send the gcode\n    python.call(\"send_gcode\",LP_file)\n  })\n  observeEvent(input$LP_E1,{\n    truc = c(\"G21 ; set units to millimeters\",\n             \"G90 ; use absolute coordinates\",\n             \"M82 ; use absolute distances for extrusion\",\n             \"G92 E0\",\n             \"G1 F3600 ; set speed in mm per min for the movement\",\n             \"G1 E1\")\n    # create the gcode\n    LP_test = \"gcode/LP_cmd.gcode\"\n    Log = LP_test\n    fileConn<-file(LP_test)\n    writeLines(truc, fileConn)\n    close(fileConn)  # send the gcode\n    python.call(\"send_gcode\",LP_test)\n  })\n  observeEvent(input$LP_E5,{\n    truc = c(\"G21 ; set units to millimeters\",\n             \"G90 ; use absolute coordinates\",\n             \"M82 ; use absolute distances for extrusion\",\n             \"G92 E0\",\n             \"G1 F3600 ; set speed in mm per min for the movement\",\n             \"G1 E5\")\n    # create the gcode\n    LP_test = \"gcode/LP_cmd.gcode\"\n    Log = LP_test\n    fileConn<-file(LP_test)\n    writeLines(truc, fileConn)\n    close(fileConn)  # send the gcode\n    python.call(\"send_gcode\",LP_test)\n  })\n  LP_applications <- reactive({\n    track_gap = input$LP_gap - (input$LP_nbr_path-1)*input$LP_gap_path\n    if(input$LP_nbr_path != 1  && input$LP_nbr_track != 1){\n      validate(need(track_gap > input$LP_gap_path,\"the track gap in <= to the path gap\"))\n    }\n    validate(need(input$LP_Y_length<=100,\"Y_length > 100\"))\n    Y_small = input$LP_bottom_dist\n    Y_big = input$LP_bottom_dist + input$LP_Y_length\n    X_gap = c()\n    for(i in seq(input$LP_nbr_track)){\n      X_gap = c(X_gap,rep(input$LP_gap_path,input$LP_nbr_path-1))\n      X_gap = c(X_gap,track_gap)\n    }\n    mat  =rbind(c(NA,NA,input$LP_first_appli - (input$LP_nbr_path-1)/2*input$LP_gap_path,Y_small,0))\n    for(i in seq(length(X_gap))){\n      vec = c(mat[nrow(mat),3],mat[nrow(mat),4],mat[nrow(mat),3],0,0) \n      if(mat[nrow(mat),4] == Y_small){vec[4] = Y_big}else{vec[4] = Y_small}\n      vec[5] = mat[nrow(mat),5] + abs(vec[2] - vec[4]) /100 * input$LP_microL_per_dm / 1000 * input$LP_syringe_ratio\n      # print(vec)\n      mat  =rbind(mat,vec)\n      if(i != length(X_gap)){\n        vec = c(vec[3],vec[4],vec[3]+X_gap[i],vec[4],vec[5])\n        vec[5] = vec[5] + abs(vec[1] - vec[3]) /100 * input$LP_microL_per_dm / 1000 * input$LP_syringe_ratio\n        # print(vec)\n        mat  =rbind(mat,vec)\n      }\n    }\n    mat[,5] = round(mat[,5],5)\n    mat\n  })\n  output$LP_infoGcode = renderUI({\n    tagList(\n      h6(paste0(\"Track are \",(input$LP_nbr_path-1)*input$LP_gap_path,\" mm large (without counting the outside)\")),\n      h6(paste0(\"Track are \",(input$LP_nbr_path)*input$LP_gap_path,\" mm large (counting the outside)\")),\n      h6(paste0(\"Surface is \",(input$LP_nbr_path)*input$LP_gap_path*input$LP_nbr_track*input$LP_Y_length,\" mm2 large (counting the outside), 1 dm2 = 10000 mm2\")),\n      h6(paste0((LP_applications()[nrow(LP_applications()),5] / input$LP_syringe_ratio),\" mL use in this print\"))#,\n      #verbatimTextOutput(\"LP_memory\")\n    )\n    \n  })\n  output$LP_memory = renderPrint({\n    truc = system(\"df -h\",intern = T)\n    truc\n  })\n  output$LP_plot <- renderPlot({\n    plot(x=0,y=0,type=\"n\",xlim=c(0,200),ylim=c(0,100),xlab=\"X\",ylab=\"Y\",sub = \"note that the plate is reversed on the printer\")\n    segments(x0=LP_applications()[,1],x1 = LP_applications()[,3],y0 = LP_applications()[,2],y1 = LP_applications()[,4])\n  })\n  LP_gcode <- reactive({\n    vec = c(\n      #paste0(\"; Produce with OC_manager, \",date()),\n      \"G28 ; home all axis, will have a problem with the Z\",\n      \"G29 ; perform bed levelling\",\n      \"G21 ; set units to millimeters\",\n      \"G90 ; use absolute coordinates\",\n      \"M82 ; use absolute distances for extrusion\",\n      \"G92 E0\")\n    if(input$LP_temp != 0){vec = c(vec,paste0(\"M190 S\",input$LP_temp,\" ; set temperature\"))}\n    vec = c(vec,\n            paste0(\"G1 F\",60*input$LP_speed,\" ; set speed in mm per min for the movement\"),\n            paste0(\"G1 Z\",input$LP_Z_offset,\" ; go in Z offset position\"),\n            paste0(\"G1 X\",LP_applications()[1,3],\" Y\",LP_applications()[1,4],\" ; go in first position\")\n    )\n    for(i in 2:nrow(LP_applications())){\n      vec <- c(vec,paste0(\"G1 X\",LP_applications()[i,3],\" Y\",LP_applications()[i,4],\" E\",LP_applications()[i,5]))\n    }\n    vec2 = c(\"G92 E0\",\n             \"G1 Z5; move Z 5 mm upper\",\n             paste0(\"G1 E-\",LP_applications()[nrow(LP_applications()),5]+10,\"; move the piston pusher up\"),\n             \"M84     ; disable motors\")\n    c(vec,vec2)\n  })\n  output$LP_gcode <- renderDataTable({\n    data.frame(gcode = LP_gcode())\n  },options = list(pageLength = 10))\n  \n  source(\"server_SA.R\",local = T)\n  \n  source(\"server_Dev.R\",local = T)\n  \n  source(\"server_Deriv.R\",local = T)\n\n  source(\"server_Method.R\",local = T)  \n  \n\n  \n  output$Log = renderDataTable({\n    input$Log_refresh\n    read.table(\"log/log.txt\",header = T,sep = \";\")\n  })\n  \n  ## old Visu part\n  # Visu_pict = reactiveValues(data=NULL)\n  # observeEvent(input$Visu_action,{\n  #   # create the gcode\n  #   Visu_file = paste0(\"pictures/\",format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\".jpg\")\n  #   Visu_file = gsub(\" \",\"_\",Visu_file)\n  #   \n  #   # command = paste(\"raspistill\",\"-w\",input$Visu_width,\"-h\",input$Visu_height,\"-n\",\"-o\",Visu_file,\"--shutter\",input$Visu_shutter,\n  #   #                 \"--timeout\",input$Visu_timeout,\"--sharpness\",input$Visu_sharpness,\"--contrast\",input$Visu_contrast,\n  #   #                 \"--brightness\",input$Visu_brightness,\"--saturation\",input$Visu_saturation,\"--ISO\",input$Visu_ISO,\n  #   #                 \"--exposure\",input$Visu_exposure,\"--awb\",input$Visu_AWB,sep=\" \")\n  #   command = paste(\"raspistill\",\"-o\",Visu_file,\"-ss\",input$Visu_shutter*1000,\"-ISO\",input$Visu_ISO)\n  #   \n  #   Log = command\n  #   # put it in the log\n  #   write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",\"Visualisation;\",Visu_file,\";\",Log,\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n  #   # send the gcode\n  #   # python.call(\"Visu_take\",Visu_file)\n  #   \n  #   print(command)\n  #   system(command)\n  #   Visu_pict$data = f.read.image(Visu_file)\n  # })\n  # output$Visu_explore_select = renderUI({\n  #   data = Visu_pict$data # just for reactivity\n  #   selectizeInput(\"Visu_explore_select\",\"Select the picture to show\",choices = dir(\"pictures\",full.names = T),selected=NULL)\n  # })\n  # # output$Visu_plot = renderPlot({\n  # #   validate(need(!is.null(Visu_pict$data),\"Take a picture.\"))\n  # #   par(mar=rep(0,4),xaxs=\"i\",yaxs=\"i\")\n  # #   DLC::raster(Visu_pict$data,height=1000)\n  # # })\n  # output$Visu_plot = renderImage({\n  #   validate(need(!is.null(Visu_pict$data),\"Take a picture.\"))\n  #   par(mar=rep(0,4),xaxs=\"i\",yaxs=\"i\")\n  #   DLC::raster(Visu_pict$data,height=1000)\n  # })\n  # # output$Visu_explore_plot = renderPlot({\n  # #   validate(need(!is.null(input$Visu_explore_select),\"Select a picture.\"))\n  # #   data = f.read.image(input$Visu_explore_select)\n  # #   par(mar=rep(0,4),xaxs=\"i\",yaxs=\"i\")\n  # #   DLC::raster(data,height=1000)\n  # # })\n  # output$Visu_explore_plot <- renderImage({\n  #   validate(need(!is.null(input$Visu_explore_select),\"Select a picture.\"))\n  #   # When input$n is 1, filename is ./images/image1.jpeg\n  #   # filename <- normalizePath(file.path('./images',\n  #   #                                     paste('image', input$n, '.jpeg', sep='')))\n  #   \n  #   # Return a list containing the filename\n  #   list(src = input$Visu_explore_select,\n  #        width = 500,\n  #        height = 500)\n  # }, deleteFile = FALSE)\n  # output$Visu_explore_plot_bis = renderUI({\n  #   HTML(paste0(\" <img src='/home/pi/OC_manager/\",input$Visu_explore_select,\"'> \"))\n  # })\n  \n  output$About_table_inventory = renderTable({\n    read.csv(\"tables/inventory.csv\",header=T,sep=\";\")\n  })\n  \n  \n})\n",
    "created" : 1506347014806.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3450050260",
    "id" : "5ADBDE23",
    "lastKnownWriteTime" : 1496761663,
    "last_content_update" : 1496761663,
    "path" : "~/MEGA/OC/Software/OC_manager/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}