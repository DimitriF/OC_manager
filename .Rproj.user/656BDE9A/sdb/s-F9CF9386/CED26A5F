{
    "collab_server" : "",
    "contents" : "## server_Method.R\nlibrary(rhandsontable)\nsource(\"eat_table.R\")\noutput$Method_control_1 = renderUI({\n  tagList(\n    fluidPage(fluidRow(\n           column(2,selectizeInput(\"Method_step_new\",\"Select new step\",choices = steps_choices)),\n           actionButton(\"Method_step_add\",\"\",icon=icon(\"plus\")),\n           actionButton(\"Method_step_delete\",\"\",icon = icon(\"window-close\")),\n           actionButton(\"Method_step_exec\",\"\",icon = icon(\"play\")),\n           actionButton(\"Method_step_stop\",\"\",icon = icon(\"stop\")),\n           column(2,textInput(\"Method_save_name\",\"Method name to save\",\"Sandbox\")),actionButton(\"Method_save\",\"\",icon=icon(\"save\")),\n           column(2,uiOutput(\"Method_load_names\")),actionButton(\"Method_load\",\"\",icon=icon(\"folder-o\")),actionButton(\"Method_load_refresh\",\"\",icon=icon(\"refresh\")),\n           actionButton(\"Method_step_home\",\"\",icon = icon(\"home\")),\n           actionButton(\"Method_step_parking\",\"\",icon = icon(\"eyedropper\")),\n           actionButton(\"Method_nozzle_test\",\"\",icon = icon(\"heartbeat\")),\n           actionButton(\"Method_DART_parking\",\"\",icon = icon(\"reply-all\")),\n           column(2,textOutput(\"Method_feedback\")),\n           bsTooltip(\"Method_step_add\",\"add step\"),\n           bsTooltip(\"Method_step_delete\",\"delete step\"),\n           bsTooltip(\"Method_step_exec\",\"Execute step, method will be saved\"),\n           bsTooltip(\"Method_step_stop\",\"Emergency stop\"),\n           bsTooltip(\"Method_save\",\"Save the method, carefull to overwritte\"),\n           bsTooltip(\"Method_load_refresh\",\"Refresh list of method names\"),\n           bsTooltip(\"Method_load\",\"Load saved method\"),\n           bsTooltip(\"Method_step_home\",\"Go in home position\"),\n           bsTooltip(\"Method_step_parking\",\"For the inkjet, send the cartridge in parking position, go home first or you will break the machine\"),\n           bsTooltip(\"Method_nozzle_test\",\"test the nozzles with a paper, go home first or you will break the machine\"),\n           bsTooltip(\"Method_DART_parking\",\"For the DART, send the plate in parking position, go home first or you will break the machine\")\n    )),\n    column(2,\n           # uiOutput(\"Method_control_4\"),\n           uiOutput(\"Method_control_2\")\n           ),\n    uiOutput(\"Method_control_3\"),\n    uiOutput(\"Method_control_5\")\n    )\n})\n\n\noutput$Method_feedback = renderText({\n  Method_feedback$text\n})\nMethod_feedback = reactiveValues(text=\"no feedback yet\")\n\noutput$Method_control_2 = renderUI({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  input$Method_step_add\n  truc = seq(length(Method$l))\n  names(truc) = paste0(\"Step \",seq(length(Method$l)),\": \",lapply(Method$l,function(x){x$type}))\n  radioButtons(\"Method_steps\",\"Steps\",choices = truc,selected = Method$selected)\n})\noutput$Method_control_3 = renderUI({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  if(!is.null(input$Method_steps)){\n    if(Method$l[[as.numeric(input$Method_steps)]]$type %in% need_appli){\n      tagList(\n        column(5,\n               actionButton(\"Method_step_update\",\"Update step\",icon=icon(\"gears\")),\n               downloadButton(\"Method_gcode_download\",\"Download Gcode\"),\n               rHandsontableOutput(\"Method_step_option\")\n        ),\n        column(5,\n               rHandsontableOutput(\"Method_step_appli_table\"),\n               verbatimTextOutput(\"Method_step_feedback\")\n        )\n        \n      )\n    }else{\n      tagList(\n        column(5,\n               actionButton(\"Method_step_update\",\"Update step\",icon=icon(\"gears\")),\n               downloadButton(\"Method_gcode_download\",\"Download Gcode\"),\n               rHandsontableOutput(\"Method_step_option\"),\n               verbatimTextOutput(\"Method_step_feedback\")\n        ),\n        column(5,\n               plotOutput(\"Method_plot\",width=\"400px\",height=\"400px\")\n               )\n        \n      )\n    }\n  }\n})\noutput$Method_control_4 = renderUI({\n  validate(\n    need(!board,\"not in DPE\"),\n    need(connect$board,\"Please connect the board\")\n  )\n  # TempInvalidate() ## called in server.R to invalidate every 2 secondes\n  # full = python.call(\"get_temp\")\n  # full = gsub(pattern = \"ok T:499.5 /0.0 B:\",x = full,replacement = \"Bed temp: \")\n  # full = gsub(pattern = \"T0:499.5 /0.0 @:0 B@:0 \",x = full,replacement = \"Â°C\")\n  tagList(\n    h6(\"no temp\")\n  )\n})\noutput$Method_control_5 = renderUI({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  if(!is.null(input$Method_steps)){\n    if(Method$l[[as.numeric(input$Method_steps)]]$type %in% need_appli){\n      tagList(\n        column(12,\n               column(6,DT::dataTableOutput(\"Method_gcode\")),\n               column(6,plotOutput(\"Method_plot\",width=\"400px\",height=\"400px\"))\n        )\n      )\n    }else{\n      DT::dataTableOutput(\"Method_gcode\")\n    }\n  }\n})\noutput$Method_load_names = renderUI({\n  input$Method_load_refresh\n  selectizeInput(\"Method_load_name\",\"Method name to load\",choices=dir(\"methods/\"))\n})\n\nMethod = reactiveValues(l=list(),selected = 1)\n\nobserveEvent(input$Method_step_add,{\n  data = read.table(paste0(\"tables/\",input$Method_step_new,\"_table.csv\"),header=T,sep=\";\")\n  Method$l[[length(Method$l)+1]] = list(type=input$Method_step_new,\n                                        table=data,\n                                        eat_table = eat_table[[input$Method_step_new]],\n                                        gcode = NULL,\n                                        plot=function(){plot(x=1,y=1,type=\"n\",main=\"Update to visualize\")},\n                                        info = \"update to see the info\",\n                                        Done = F)\n  if(input$Method_step_new %in% need_appli){\n    nbr_band=data[data[,1] == \"nbr_band\",2]\n    Method$l[[length(Method$l)]]$appli_table = data.frame(Band = seq(nbr_band),Vial = rep(1,nbr_band),Repeat = rep(1,nbr_band),I = rep(10,nbr_band),Content = rep(\"water\",nbr_band),Use = rep(T,nbr_band))\n    Method$l[[length(Method$l)]]$appli_table$Content = as.character(Method$l[[length(Method$l)]]$appli_table$Content)\n  }\n  Method_feedback$text = paste0(\"Step \",input$Method_step_new,\" added\")\n  Method$selected = length(Method$l)\n})\nobserveEvent(input$Method_step_delete,{\n  Method_feedback$text = paste0(\"Step \",input$Method_steps,\" deleted\")\n  Method$l[[as.numeric(input$Method_steps)]] = NULL\n  Method$selected = 1\n})\n\nobserveEvent(input$Method_step_update,{\n  data = hot_to_r(input$Method_step_option)\n  Method$l[[as.numeric(input$Method_steps)]]$table=data\n  ## update SA_table if appicable\n  if(Method$l[[as.numeric(input$Method_steps)]]$type %in% need_appli){\n    appli_data = hot_to_r(input$Method_step_appli_table)\n    nbr_band = data[data[,1] == \"nbr_band\",2]\n    if(nbr_band != nrow(appli_data)){ ## make a new one if applicable\n      appli_data = data.frame(Band = seq(nbr_band),Vial = rep(1,nbr_band),Repeat = rep(1,nbr_band),I = rep(10,nbr_band),Content = rep(\"water\",nbr_band),Use = rep(T,nbr_band))\n    }\n    Method$l[[as.numeric(input$Method_steps)]]$appli_table=appli_data\n    Method$l[[length(Method$l)]]$appli_table$Content = as.character(Method$l[[length(Method$l)]]$appli_table$Content) ## coercion. \n  }\n  \n  ## eat tables\n  withProgress(message = \"Processing\", value=0, { ## do not work well, don't know why\n    Method$l[[as.numeric(input$Method_steps)]] = Method$l[[as.numeric(input$Method_steps)]]$eat_table(Method$l[[as.numeric(input$Method_steps)]])\n  })\n  Method$selected = input$Method_steps\n  Method_feedback$text = paste0(\"Step \",input$Method_steps,\" updated\")\n  Method$l[[length(Method$l)]]$appli_table$Content = as.character(Method$l[[length(Method$l)]]$appli_table$Content) ## coercion. \n})\n\noutput$Method_step_option = renderRHandsontable({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  data = Method$l[[as.numeric(input$Method_steps)]]$table\n  data$Value = as.numeric(data$Value)\n  rhandsontable(data, rowHeaderWidth = 200) %>%\n    hot_context_menu(allowRowEdit = FALSE, allowColEdit = FALSE) %>%\n    hot_col(\"Option\", readOnly = TRUE)\n})\noutput$Method_step_appli_table = renderRHandsontable({\n  data = Method$l[[as.numeric(input$Method_steps)]]$appli_table\n  rhandsontable(data)\n})\n\nobserveEvent(input$Method_save,{\n  withProgress(message = \"Processing\", value=0, {\n    l = Method$l\n    save(l,file=paste0(\"methods/\",input$Method_save_name,\".Rdata\"))\n    Method_feedback$text = paste0(\"Method \",input$Method_save_name,\" saved\")\n  })\n})\nobserveEvent(input$Method_load,{\n  withProgress(message = \"Processing\", value=0, {\n    load(paste0(\"methods/\",input$Method_load_name))\n    Method$l = l\n    Method$selected = 1\n    Method_feedback$text = paste0(\"Method \",input$Method_load_name,\" loaded\")\n    updateTextInput(session, \"Method_save_name\", value = gsub(pattern = \".Rdata\",replacement = \"\",x = input$Method_load_name))\n  })\n})\n\noutput$Method_plot = renderPlot({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  if(!is.null(input$Method_steps)){\n    Method$l[[as.numeric(input$Method_steps)]]$plot()\n    if(!is.null(input$Chrom_upload)){\n      rasterImage(f.read.image(input$Chrom_upload$datapath),xleft = 0,xright = 100,ybottom = 0,ytop = 100)\n      par(new=T)\n      Method$l[[as.numeric(input$Method_steps)]]$plot()\n    } \n  }\n})\noutput$Method_step_feedback = renderText({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  Method$l[[as.numeric(input$Method_steps)]]$info\n})\n\noutput$Method_gcode = DT::renderDataTable({\n  validate(\n    need(length(Method$l) > 0 ,\"add a step or load a saved method\")\n  )\n  if(!is.null(input$Method_steps)){\n    data.frame(gcode = Method$l[[as.numeric(input$Method_steps)]]$gcode)\n  }\n}, options = list(pageLength = 10))\n\n## part for emergency stop\nlibrary(parallel)\nrv <- reactiveValues(\n  id=list()\n)\nobserveEvent(input$Method_step_exec,{\n  if(board){ ## when no arduino connected, just testing\n    if(!is.null(rv$id$pid)) return()\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",Method$l[[as.numeric(input$Method_steps)]]$type,\";Methods\",\";\",\"Log\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    rv$id <- mcparallel({ python.call(\"test_stop\")}) #\n    Method_feedback$text = paste0(\"Step \",input$Method_steps,\" started. Process \",rv$id$pid)\n  }else{\n    # create the gcode\n    # Method_file = paste0(\"gcode/\",format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\"Method\",\".gcode\")\n    Method_file = paste0(\"gcode/\",\"Method\",\".gcode\")\n    Log = Method_file\n    fileConn<-file(Method_file)\n    writeLines(Method$l[[as.numeric(input$Method_steps)]]$gcode, fileConn)\n    close(fileConn)\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",Method$l[[as.numeric(input$Method_steps)]]$type,\";\",Log,\";\",Log,\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n    # send the gcode\n    # if(!is.null(rv$id$pid)) return()\n    rv$id <- mcparallel({ python.call(\"send_gcode\",Method_file)}) #python.call(\"test_stop\")\n    Method_feedback$text = paste0(\"Step \",input$Method_steps,\" started. Process \",rv$id$pid)\n  }\n  \n})\noutput$Method_gcode_download <- downloadHandler(\n  filename = function(x){paste0(\"OC_manager_\",\n                                Method$l[[as.numeric(input$Method_steps)]]$type,\n                                \"_\",\n                                paste0(Method$l[[as.numeric(input$Method_steps)]]$table[,2],collapse = \"_\"),\n                                '.gcode')},##\"OC_manager.gcode\",\n  content = function(file) {\n    Method_file = paste0(\"gcode/\",\"Method\",\".gcode\")\n    Log = Method_file\n    fileConn<-file(Method_file)\n    writeLines(Method$l[[as.numeric(input$Method_steps)]]$gcode, fileConn)\n    close(fileConn)\n    file.copy(paste0(\"gcode/\",\"Method\",\".gcode\"), file)\n  }\n)\nobserveEvent(input$Method_step_stop,{\n  if(!is.null(rv$id$pid)){\n    tools::pskill(rv$id$pid)\n    Method_feedback$text = paste0(\"Step \",input$Method_steps,\" stoped. Process \",rv$id$pid,\" killed\")\n    rv$id <- list()\n    # put it in the log\n    write(paste0(format(Sys.time(),\"%Y%m%d_%H:%M:%S\"),\";\",Method$l[[as.numeric(input$Method_steps)]]$type,\";\",\"Emergency stop\",\"; LOG\",\";\",connect$Visa,\";\",input$Plate),file=\"log/log.txt\",append = T)\n  }\n})\nobserveEvent(input$Method_step_home,{\n  # create the gcode\n  test_ink_file = \"gcode/test_ink_cmd.gcode\"\n  Log = test_ink_file\n  fileConn<-file(test_ink_file)\n  writeLines(\"G28 Y0\", fileConn)\n  close(fileConn)  # send the gcode\n  python.call(\"send_gcode\",test_ink_file)\n  test_ink_file = \"gcode/test_ink_cmd.gcode\"\n  Log = test_ink_file\n  fileConn<-file(test_ink_file)\n  writeLines(\"G28 X0\", fileConn)\n  close(fileConn)  # send the gcode\n  python.call(\"send_gcode\",test_ink_file)\n})\nobserveEvent(input$Method_step_parking,{\n  # create the gcode\n  test_ink_file = \"gcode/test_ink_cmd.gcode\"\n  Log = test_ink_file\n  fileConn<-file(test_ink_file)\n  writeLines(\"G1 X 130\", fileConn)\n  close(fileConn)  # send the gcode\n  python.call(\"send_gcode\",test_ink_file)\n})\nobserveEvent(input$Method_DART_parking,{\n  # create the gcode\n  test_ink_file = \"gcode/test_ink_cmd.gcode\"\n  Log = test_ink_file\n  fileConn<-file(test_ink_file)\n  writeLines(\"G1 Y 100 F3600\", fileConn)\n  close(fileConn)  # send the gcode\n  python.call(\"send_gcode\",test_ink_file)\n})\nobserveEvent(input$Method_nozzle_test,{\n  I = 20 ; L = 5## cahnge here to input different pulse and I\n  gcode = c(\"G91\",paste0(\"M700 P0 I\",I,\" L\",L,\" S\",4095)) \n  for(i in seq(12)){\n    S=rep(0,12);S[i] = 1;S = BinToDec(S)\n    for(j in seq(10)){gcode = c(gcode,paste0(\"G1 X\",0.25),\"M400\",paste0(\"M700 P0 I\",I,\" L\",L,\" S\",S))}\n  }\n  gcode = c(gcode,paste0(\"G1 X\",2),\"M400\",paste0(\"M700 P0 I\",I,\" L\",L,\" S\",4095))\n  gcode = c(gcode,\"G90\",\"M84\")\n  test_ink_file = paste0(\"gcode/\",\"test_ink\",\".gcode\")\n  Log = test_ink_file\n  fileConn<-file(test_ink_file)\n  writeLines(gcode, fileConn)\n  close(fileConn)\n  # send the gcode\n  python.call(\"send_gcode\",test_ink_file)\n  \n})\n\n# observe({\n#   invalidateLater(1000, session)\n#   if(!is.null(rv$id$pid)){\n#     res <- mccollect(rv$id,wait=F)\n#     if(is.null(res)){\n#       Method_feedback$text <- sprintf(\"%1$s in process. Press stop to kill it\",rv$id$pid)\n#     }else{\n#       Method_feedback$text <- jsonlite::toJSON(res)\n#       rv$id <- list()\n#     }\n#   }\n# })",
    "created" : 1504877835078.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2548025616",
    "id" : "CED26A5F",
    "lastKnownWriteTime" : 1499025011,
    "last_content_update" : 1499025011,
    "path" : "~/MEGA/OC/Software/OC_manager/server_Method.R",
    "project_path" : "server_Method.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}