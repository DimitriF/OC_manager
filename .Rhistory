Sys.sleep(0.1)
}
}
readLines(f)
write("M42 P63 S0",file = f)
write("M42 P63 S255",file = f)
readLines(f)
scan(f,n=1, quiet=F,what = "character",sep="\n")
scan(f,n=1, quiet=F,what = "character")
write("M42 P63 S0",file = f)
close(f)
f <- file(dir("/dev",pattern = "ttyACM",full.names = T), open="r+")
write("M42 P63 S0",file = f)
scan(f,n=1, quiet=F,what = "character")
scan(f,n=1, quiet=F,what = "character",sep="\n")
write("M42 P63 S255",file = f)
scan(f,n=1, quiet=F,what = "character",sep="\n")
write("M42 P63 S0",file = f)
scan(f,n=1, quiet=F,what = "character")
library(shinyBS)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
64000*3000
64000*3000/1000000
system("sudo rsync -a -v /home/clau/MEGA/OC/Software/OC_manager/ pi@134.176.158.78:/home/pi/OC_manager/")
dir("/home/clau/Dropbox/")
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
## server_TLC_MS for OC_manager
##
TLC_MS_x_width = 2000
TLC_MS_y_height = 1000
data=array(1,dim=c(TLC_MS_y_height,TLC_MS_x_width,3))
raster(data)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shinytest::recordTest()
shinytest::shinytest()
testApp()
shinytest::recordTest()
shinytest::recordTest()
shinytest::recordTest()
shinytest::recordTest()
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5572)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5572)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5572)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5573)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
install.packages("shinyalert")
library(shinyalert)
?shinyalert
library(shiny)
library(shinyalert)
?updateTextInput
?updateTextAreaInput
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5574)
library(shiny)
library(shinyalert)
shinyApp(
ui = fluidPage(
useShinyalert(),  # Set up shinyalert
actionButton("btn", "Click me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Show a simple modal
shinyalert(title = "You did it!", type = "success")
})
}
)
T && F
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
fileConn<-file("gcode/Method_step_home.gcode")
writeLines(c("G28 Y0","G28 X0", fileConn)
close(fileConn)  # send the gcode
close(fileConn)  # send the gcode
fileConn<-file("gcode/Method_step_home.gcode")
writeLines(c("G28 Y0","G28 X0"), fileConn)
close(fileConn)  # send the gcode
fileConn<-file("gcode/Method_step_parking.gcode")
writeLines(c("G1 X 130"), fileConn)
close(fileConn)  # send the gcode
fileConn<-file("gcode/Method_DART_parking.gcode")
writeLines(c("G1 Y 100 F3600"), fileConn)
close(fileConn)  # send the gcode
fileConn<-file("gcode/Method_DART_parking.gcode")
writeLines(c("G1 Y100 F3600"), fileConn)
close(fileConn)  # send the gcode
I = 20 ; L = 5## cahnge here to input different pulse and I
gcode = c("G91",paste0("M700 P0 I",I," L",L," S",4095))
for(i in seq(12)){
S=rep(0,12);S[i] = 1;S = BinToDec(S)
for(j in seq(10)){gcode = c(gcode,paste0("G1 X",0.25),"M400",paste0("M700 P0 I",I," L",L," S",S))}
}
gcode = c(gcode,paste0("G1 X",2),"M400",paste0("M700 P0 I",I," L",L," S",4095))
gcode = c(gcode,"G90","M84")
test_ink_file = paste0("gcode/","Method_nozzle_test",".gcode")
Log = test_ink_file
fileConn<-file(test_ink_file)
writeLines(gcode, fileConn)
close(fileConn)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
q()
library(shiny)
shiny::runApp(launch.browser = T,host = "0.0.0.0",port=5571)
?source
source("~/Downloads/test.R")
x=source("~/Downloads/test.R")
x
x=source("~/Downloads/test.R")$value
x
x=source("~/Downloads/test.R")$value
x
x(1)
eat_table = list()
for(i in dir("eat_tables/") %>% gsub(x=.,pattern=".R",replacement="")){
eat_table[[i]] = source(paste0("eat_tables/",i,".R"))$value
}
library(magrittr)
eat_table = list()
for(i in dir("eat_tables/") %>% gsub(x=.,pattern=".R",replacement="")){
eat_table[[i]] = source(paste0("eat_tables/",i,".R"))$value
}
load("~/MEGA/OC/Software/OC_manager/methods/20180215_alibibriofisheri.Rdata")
?as.factor9
?as.factor
factor(letters)
factor(letters[1:10])
factor(letters[1:10],levels = letters)
x = factor(letters[1:10],levels = letters)
str(x)
length(x)
Sys.time()
?Sys.time
?duplicated
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
install.packages()
install.packages("rintrojs")
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rintrojs)
ui <- shinyUI(fluidPage(
introjsUI(),
mainPanel(
textInput("intro","Enter an introduction"),
actionButton("btn","Press me")
)
)
)
server <- shinyServer(function(input, output, session) {
steps <- reactive(data.frame(element = c(NA,"#btn"),
intro = c(input$intro,"This is a button")))
observeEvent(input$btn,{
introjs(session,options = list(steps=steps()))
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session)
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session)
)
})
# Run the application
shinyApp(ui = ui, server = server)
?imageOutput
