introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
install.packages()
install.packages("rintrojs")
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rintrojs)
ui <- shinyUI(fluidPage(
introjsUI(),
mainPanel(
textInput("intro","Enter an introduction"),
actionButton("btn","Press me")
)
)
)
server <- shinyServer(function(input, output, session) {
steps <- reactive(data.frame(element = c(NA,"#btn"),
intro = c(input$intro,"This is a button")))
observeEvent(input$btn,{
introjs(session,options = list(steps=steps()))
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session)
)
})
# Run the application
shinyApp(ui = ui, server = server)
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session)
)
})
# Run the application
shinyApp(ui = ui, server = server)
?imageOutput
length(list())
load("~/MEGA/OC/Software/OC_manager/methods/Sandbox.Rdata")
str(l)
l[[6]]$plot()
l[[6]]$table
library(shiny)
runGitHub("OC_manager","dimitrif")
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
knitr::opts_chunk$set(echo = TRUE)
plot(c(0,200),c(0,100),type="n")
par(mar=c(0,0,0,0))
plot(c(0,200),c(0,100),type="n")
symbols(x=seq(from=15,by=10,length.out = 18),y=8,
rectangles = cbind(rep(8,18),rep(1,18)),add=T,inches = F)
par(mar=c(0,0,0,0))
plot(c(0,200),c(0,100),type="n")
symbols(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),
rectangles = cbind(rep(8,18),rep(1,18)),add=T,inches = F)
par(mar=c(0,0,0,0))
plot(c(0,200),c(0,100),type="n")
symbols(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),
rectangles = cbind(rep(8,18),rep(1,18)),add=T,inches = F,bg=1)
par(mar=c(0,0,0,0))
plot(c(0,200),c(0,100),type="n")
symbols(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),
rectangles = cbind(rep(8,18),rep(1,18)),add=T,inches = F,bg=1)
text(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),pos=3)
par(mar=c(0,0,0,0))
plot(c(0,200),c(0,100),type="n")
symbols(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),
rectangles = cbind(rep(8,18),rep(1,18)),add=T,inches = F,bg=1)
text(x=seq(from=15,by=10,length.out = 18),y=rep(8,18),pos=1)
install.packages("rintrojs")
library(rintrojs)
?rintrojs
library(rintrojs)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
introjsUI(),
# Application title
introBox(
titlePanel("Old Faithful Geyser Data"),
data.step = 1,
data.intro = "This is the title panel"
),
# Sidebar with a slider input for number of bins
sidebarLayout(sidebarPanel(
introBox(
introBox(
sliderInput(
"bins",
"Number of bins:",
min = 1,
max = 50,
value = 30
),
data.step = 3,
data.intro = "This is a slider",
data.hint = "You can slide me"
),
introBox(
actionButton("help", "Press for instructions"),
data.step = 4,
data.intro = "This is a button",
data.hint = "You can press me"
),
data.step = 2,
data.intro = "This is the sidebar. Look how intro elements can nest"
)
),
# Show a plot of the generated distribution
mainPanel(
introBox(
plotOutput("distPlot"),
data.step = 5,
data.intro = "This is the main plot"
)
))
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output, session) {
# initiate hints on startup with custom button and event
hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),
events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
# start introjs when button is pressed with custom options and events
observeEvent(input$help,
introjs(session, options = list("nextLabel"="Onwards and Upwards",
"prevLabel"="Did you forget something?",
"skipLabel"="Don't be a quitter"),
events = list("oncomplete"=I('alert("Glad that is over")')))
)
})
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
load("~/MEGA/OC/Software/OC_manager/methods/Sandbox.Rdata")
str(data)
str(l)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
load("~/MEGA/OC/Software/OC_manager/login.Rdata")
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
4.26/4
3.65/4
3.89/4
4.06/4
3.96/4
3.46/4
library(shiny)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
raster
library(DLC)
raster
f.read.image
NULL
0
is.null(0)
redim.array
normalyze
normalize
floor(2.4)
round(2.4)
round(2.5)
round(2.6)
floor(2.6)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
floor(2.6)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
library(shiny)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
file.exists("config_tlcms.csv")
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
library(shiny)
shiny::runApp("/home/clau/MEGA/OC/Software/OC_manager",launch.browser = T,host = "0.0.0.0",port=5570)
